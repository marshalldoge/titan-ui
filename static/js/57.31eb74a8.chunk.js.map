{"version":3,"sources":["components/ClientTable/ClientTable.js"],"names":["PaginatedLazyTable","React","lazy","ClientTable","state","columns","data","columnDefs","headerName","field","width","windowHeight","document","body","clientHeight","pageSize","onRowClick","record","console","log","props","history","push","pathname","search","id","page","headers","Authorization","getCookie","me","this","params","idCompany","url","withParams","constants","fetch","method","then","response","json","success","setState","prevState","i","content","length","parseTime","pageData","catch","error","loadTablePage","loadClientTablePage","clientCount","title","Component","withRouter","connect","appUserReducer","companyReducer"],"mappings":"8NASMA,G,aAAoBC,IAAMC,MAAK,kBAAM,6EAErCC,E,4MAEFC,MAAM,CACFC,QAAS,GACTC,KAAM,GACNC,WAAY,CACR,CAACC,WAAY,KAAMC,MAAO,KAAMC,MAAO,OACvC,CAACF,WAAY,SAAUC,MAAO,WAAYC,MAAO,OACjD,CAACF,WAAY,UAAWC,MAAO,YAAaC,MAAO,QAEvDC,aAAcC,SAASC,KAAKC,aAC/BC,SAAU,I,EAqCXC,WAAa,SAAAC,GAETC,QAAQC,IAAI,gBAAgBF,GAC5B,EAAKG,MAAMC,QAAQC,KAAK,CACpBC,SAAU,gBACVC,OAAQ,aAAeP,EAAOQ,M,kEAvClBC,GAChBR,QAAQC,IAAI,iBAAiBO,GAC7B,IAAMC,EAAU,CACZ,eAAgB,kCAChBC,cAAeC,YAAU,QAEzBC,EAAKC,KACLC,EAAS,CACTC,UAAWF,KAAKX,MAAMa,UACtBP,KAAMA,EACTX,SAAUgB,KAAKX,MAAML,UAEhBmB,EAAMC,YAAWC,IAAwB,mCAAoCJ,GACnFK,MAAMH,EAAK,CACPI,OAAQ,MACRX,QAASA,IACVY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxBF,MAAK,SAAUC,GAETA,EAASE,SAERZ,EAAGa,UAAU,SAACC,GACV,IAAI,IAAIC,EAAI,EAAGA,EAAIL,EAASlC,KAAKwC,QAAQC,OAAQF,IAC7CL,EAASlC,KAAKwC,QAAQD,GAAtB,kBAAgDG,YAAUR,EAASlC,KAAKwC,QAAQD,GAAtB,mBAG9D,OADAD,EAAUK,SAASvB,GAAMc,EAASlC,KAAKwC,QAChCF,QAGhBM,OAAM,SAAUC,GACnBjC,QAAQC,IAAIgC,Q,+BAehB,OADAjC,QAAQC,IAAI,UAAUY,KAAKX,OAEvB,6BACI,kBAACpB,EAAD,CACIiC,UAAWF,KAAKX,MAAMa,UACtB1B,WAAYwB,KAAK3B,MAAMG,WACvB6C,cAAerB,KAAKsB,oBACpBN,OAAQhB,KAAKX,MAAMkC,YACnBtC,WAAYe,KAAKf,WACjBuC,MAAO,WACPxC,SAAUgB,KAAK3B,MAAMW,gB,GApEfyC,aAmFXC,sBAAWC,aARF,SAAAtD,GAAU,IACtBuD,EAAmCvD,EAAnCuD,eAAgBC,EAAmBxD,EAAnBwD,eAChB3B,EAAc0B,EAAd1B,UACAqB,EAAgBM,EAAhBN,YAER,OADApC,QAAQC,IAAI,iBAAiBmC,GACtB,CAACrB,YAAWqB,iBAGGI,CAAyBvD","file":"static/js/57.31eb74a8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { Table } from \"antd\";\nimport { getCookie, withParams, parseTime} from \"../../utils.js\";\nimport * as constants from \"../../constants\"\nimport {connect} from \"react-redux\";\nimport \"antd/dist/antd.css\";\nimport \"../../stylesheets/components/appUserTable/_appUserTable.scss\";\n\nconst PaginatedLazyTable= React.lazy(() => import(\"../../components/PaginatedLazyTable/PaginatedLazyTable\"));\n\nclass ClientTable extends Component {\n    // TODO Add Date of last sale to table\n    state={\n        columns: [],\n        data: [],\n        columnDefs: [\n            {headerName: \"ID\", field: \"id\", width: \"10%\"},\n            {headerName: \"Nombre\", field: \"fullName\", width: \"45%\"},\n            {headerName: \"Celular\", field: \"cellphone\", width: \"45%\"},\n        ],\n        windowHeight: document.body.clientHeight,\n\t    pageSize: 12\n    };\n\n    loadClientTablePage(page) {\n        console.log(\"Loading page: \",page);\n        const headers = {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            Authorization: getCookie(\"JWT\")\n        };\n        let me = this;\n        let params = {\n            idCompany: this.props.idCompany,\n            page: page,\n\t        pageSize: this.props.pageSize\n        };\n        const url = withParams(constants.BACKEND_URL + \"/Client/findByIdCompanyPaginated\", params);\n        fetch(url, {\n            method: \"GET\",\n            headers: headers\n        }).then(response => response.json())\n            .then(function (response) {\n                //console.log(\"me in getpage fetch is \",me);\n                if(response.success){\n                    //console.log(\"Page data received: \",response);\n                    me.setState ((prevState) =>{\n                        for(let i = 0; i < response.data.content.length; i++){\n                            response.data.content[i][\"lastSaleTimeStamp\"] = parseTime(response.data.content[i][\"lastSaleTimeStamp\"]);\n                        }\n                        prevState.pageData[page]=response.data.content;\n                        return prevState;\n                    });\n                }\n            }).catch(function (error) {\n            console.log(error);\n        });\n    };\n\n    onRowClick = record => {\n        //const idSale = record.id;\n        console.log(\"Clicked row: \",record);\n        this.props.history.push({\n            pathname: \"ClientProfile\",\n            search: \"?idClient=\" + record.id\n        })\n    };\n\n    render() {\n        console.log(\"Props: \",this.props);\n        return (\n            <div>\n                <PaginatedLazyTable\n                    idCompany={this.props.idCompany}\n                    columnDefs={this.state.columnDefs}\n                    loadTablePage={this.loadClientTablePage}\n                    length={this.props.clientCount}\n                    onRowClick={this.onRowClick}\n                    title={\"Clientes\"}\n                    pageSize={this.state.pageSize}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const { appUserReducer, companyReducer } = state;\n    const { idCompany } = appUserReducer;\n    const { clientCount } = companyReducer;\n    console.log(\"Client count: \",clientCount);\n    return {idCompany, clientCount};\n};\n\nexport default withRouter(connect(mapStateToProps)(ClientTable));\n"],"sourceRoot":""}