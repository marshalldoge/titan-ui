{"version":3,"sources":["components/ItemQuantityForm/ItemQuantityForm.js"],"names":["TButton","Typography","Title","React","lazy","ItemQuantityForm","props","state","saleItemQuantities","0","hashcode","name","salePrice","quantity","total","lastItemId","saveSale","me","itemQuantities","item","hasOwnProperty","itemObject","parseInt","push","time","moment","format","body","JSON","stringify","idAppUser","idClient","client","id","billName","nit","idShift","idCurrency","idCompany","idWarehouse","paid","headers","Authorization","getCookie","url","withParams","constants","fetch","method","then","response","json","data","success","console","log","increaseClientSaleCount","increaseSaleCount","statusMessage","styleHeaderRow","borderWidth","borderRadius","height","background","styleRow","styleCell","display","alignItems","justifyContent","textAlign","styleInputName","width","styleInputNumber","onSelect","value","option","idSaleItem","setState","fillRowData","handleCodeChange","handleSPChange","e","target","valueQuantity","totalBefore","parseFloat","totalSale","handleQuantityChange","valueSalePrice","itemData","itemQuantityHashMap","undefined","saleItemData","idMeasure","idItem","removeItem","removeItemButton","type","label","onClick","className","style","span","order","SaleItemQuantity","saleIQ","ItemQuantity","size","offset","itemQuantity","key","dataSource","itemQuantityCode","placeholder","filterOption","onChange","bind","this","Component","withRouter","connect","appUserReducer","itemQuantityReducer"],"mappings":"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","file":"static/js/60.0d5eafa0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { CloseOutlined } from '@ant-design/icons';\nimport { Col, Row, Input, Typography, AutoComplete } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"../../stylesheets/layout/_adminLayout.scss\";\nimport \"../../redux/reducers/appUserReducer\"\nimport {connect} from \"react-redux\";\nimport { increaseSaleCount, increaseClientSaleCount } from \"../../redux/actions\";\nimport {getCookie, withParams} from \"../../utils\";\nimport * as constants from \"../../constants\";\nimport \"./_ItemQuantityForm.scss\";\nimport moment from \"moment\";\n\nconst { Title } = Typography;\nconst TButton = React.lazy(() => import(\"../TButton/TButton\"));\n\nclass ItemQuantityForm extends Component {\n    constructor(props) {\n        super(props);\n        this.removeItem.bind(this);\n    }\n\n    state = {\n        saleItemQuantities:{\n            0: {\n              hashcode: \"\",\n              name: \"\",\n              salePrice: \"\",\n              quantity: \"\",\n              total: \"\"\n            }\n            },\n        lastItemId:0,\n        total:0\n    };\n\n    saveSale = () => {\n        let me=this;\n        let itemQuantities = [];\n        let saleItemQuantities = this.state.saleItemQuantities;\n        //console.log(\"lasditem id: \",this.state.lastItemId);\n        for(let item in saleItemQuantities){\n            if(saleItemQuantities.hasOwnProperty(item)) {\n                let itemObject = saleItemQuantities[item];\n                if(parseInt(item) !== parseInt(this.state.lastItemId)){\n                    //console.log(\"Adding \",item,\" vs \",this.state.lastItemId);\n                    itemQuantities.push(itemObject);\n                }\n            }\n        }\n        let time = moment().format(\"YYYY-MM-DD[T]HH:mm:ss\");\n        let body = JSON.stringify({\n            idAppUser:this.props.idAppUser,\n            idClient:this.props.client.id,\n            billName:this.props.billName,\n            nit:this.props.nit,\n            idShift:this.props.idShift,\n            idCurrency:\"1\", //TODO Retrieve this from AppUser or some other Model\n            idCompany:this.props.idCompany,\n            idWarehouse: this.props.idWarehouse,\n            time:time,\n            total:this.state.total,\n            itemQuantities:itemQuantities,\n            paid:this.state.total\n        });\n        var headers = {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            Authorization: getCookie(\"JWT\")\n        };\n        let params = {\n\n        };\n        var url = withParams(constants.BACKEND_URL+\"/Sale\", params);\n        fetch(url, {\n            method: \"POST\",\n            headers: headers,\n            body:body\n        }).then(response => response.json())\n            .then(function(data) {\n                if(data.success){\n                    console.log(\"Sale saved successfully\");\n                    me.props.increaseClientSaleCount(me.props.client.id);\n                    me.props.increaseSaleCount();\n                }else{\n                    console.log(\"Failed with error \",data.statusMessage);\n                }\n            });\n    };\n\n    styleHeaderRow = {\n        borderWidth:\"4px\",\n        borderRadius: \"10px\",\n        height: \"50px\",\n        background: \"white\"\n    };\n    styleRow = {\n        borderWidth:\"4px\",\n        borderRadius: \"10px\",\n        height: \"50px\",\n        background: \"white\"\n    };\n    styleCell = {\n        height:\"100%\",\n        display : \"flex\",\n        alignItems : \"center\",\n        justifyContent: \"center\",\n        textAlign:\"center\"\n        //marginLeft:\"5px\",\n        //marginRight:\"5px\"\n    };\n    styleInputName = {\n        width:\"90%\"\n    };\n    styleInputNumber = {\n        width:\"80%\"\n    };\n    onSelect = (value,option,idSaleItem) => {\n        let saleItemQuantities = this.state.saleItemQuantities;\n        console.log(\"IdSaleItem rendered: \",idSaleItem);\n        saleItemQuantities[idSaleItem][\"hashcode\"]=value;\n        this.setState({saleItemQuantities:saleItemQuantities},() => this.fillRowData(value,idSaleItem));\n    };\n\n    handleCodeChange = (value,idSaleItem) => {\n        let saleItemQuantities = this.state.saleItemQuantities;\n        console.log(\"IdSaleItem rendered: \",idSaleItem);\n        saleItemQuantities[idSaleItem][\"hashcode\"]=value;\n        if(idSaleItem === this.state.lastItemId) {\n            saleItemQuantities[idSaleItem + 1] = {\n                hashcode: \"\",\n                name: \"\",\n                salePrice: \"\",\n                quantity: \"\",\n                total: \"\"\n            };\n        }\n        this.setState({saleItemQuantities:saleItemQuantities},() => {\n            this.fillRowData(value,idSaleItem)\n        });\n    };\n\n    handleSPChange = (e,idSaleItem) => {\n        let value = e.target.value;\n        let saleItemQuantities = this.state.saleItemQuantities;\n        saleItemQuantities[idSaleItem][\"salePrice\"]=value;\n        if(value === \"\")value=0;\n        let valueQuantity = saleItemQuantities[idSaleItem][\"quantity\"]===\"\"?0:saleItemQuantities[idSaleItem][\"quantity\"];\n        let totalBefore =parseFloat(saleItemQuantities[idSaleItem][\"total\"]);\n        saleItemQuantities[idSaleItem][\"total\"]=parseFloat(value)* parseFloat(valueQuantity);\n        //Updating the total of sale\n        let totalSale = this.state.total;\n        this.setState({total:totalSale-totalBefore+saleItemQuantities[idSaleItem][\"total\"]});\n        this.setState({saleItemQuantities:saleItemQuantities});\n    };\n\n    handleQuantityChange = (e,idSaleItem) => {\n        let value = e.target.value;\n        let saleItemQuantities = this.state.saleItemQuantities;\n        saleItemQuantities[idSaleItem][\"quantity\"]=value;\n        if(value === \"\")value=0;\n        let valueSalePrice = saleItemQuantities[idSaleItem][\"salePrice\"]===\"\"?0:saleItemQuantities[idSaleItem][\"salePrice\"];\n        let totalBefore =parseFloat(saleItemQuantities[idSaleItem][\"total\"]);\n        console.log(value,\" * \",valueSalePrice);\n        saleItemQuantities[idSaleItem][\"total\"]= parseFloat(value)* parseFloat(valueSalePrice);\n        //Updating the total of sale\n        let totalSale = this.state.total;\n        this.setState({total:totalSale-totalBefore+saleItemQuantities[idSaleItem][\"total\"]});\n        this.setState({saleItemQuantities:saleItemQuantities});\n    };\n\n    fillRowData = (hashcode,idSaleItem) => {\n        //onsole.log(\"Looking the hashcode entered in \",this.props.itemQuantityHashMap[this.props.idWarehouse]);\n        let itemData = this.props.itemQuantityHashMap[this.props.idWarehouse][hashcode];\n        //console.log(\"For the hashcode: \",hashcode,\" there is this information: \",itemData);\n        if(itemData !== undefined){\n            let saleItemData = this.state.saleItemQuantities;\n            saleItemData[idSaleItem]={\n                hashcode:hashcode,\n                name:itemData.name,\n                salePrice:itemData.salePrice,\n                quantity:1,\n                total:itemData.salePrice,\n                idMeasure:itemData.idMeasure,\n                idCurrency:itemData.idCurrency,\n                idItem:itemData.idItem\n            };\n            //Updating the total of sale\n            let totalSale = this.state.total;\n            this.setState({total:totalSale+saleItemData[idSaleItem].total});\n            this.setState({saleItemQuantities:saleItemData});\n            if(idSaleItem === this.state.lastItemId)this.setState({lastItemId:idSaleItem+1})\n        }else{\n            console.log(\"Code not found\");\n            let saleItemData = this.state.saleItemQuantities;\n            saleItemData[idSaleItem]={\n                hashcode:hashcode,\n                name:\"\",\n                salePrice:\"\",\n                quantity:0,\n                total:0\n            };\n            this.setState({saleItemQuantities:saleItemData});\n        }\n    };\n\n    removeItem = idSaleItem => {\n        let saleItemQuantities = this.state.saleItemQuantities;\n        //console.log(\"IdSaleItem rendered: \",idSaleItem);\n        delete saleItemQuantities[idSaleItem];\n        this.setState({saleItemQuantities:saleItemQuantities});\n    };\n\n    removeItemButton = idSaleItem => {\n        //console.log(idSaleItem,\" vs \",this.state.lastItemId);\n      if(idSaleItem !== this.state.lastItemId)  {\n          /*return(\n              <TButton type={\"danger\"} icon={\"close\"} onClick={()=>this.removeItem(idSaleItem)}/>\n          );\n\n           */\n          return (\n              <TButton\n                   type={\"danger\"}\n                   label={<CloseOutlined />}\n                   onClick={()=>this.removeItem(idSaleItem)}\n              />\n          );\n      }else{\n          return null;\n      }\n    };\n\n    headers = () => {\n        return(\n            <Row type=\"flex\" className={\"headerCtn\"} style={this.styleHeaderRow}>\n                <Col span={4} order={1} >\n                    Código\n                </Col>\n                <Col span={5} order={2} >\n                    Name\n                </Col>\n                <Col span={4} order={3} >\n                    Cantidad\n                </Col>\n                <Col span={4} order={4} >\n                    PV\n                </Col>\n                <Col span={4} order={5} >\n                    Total\n                </Col>\n                <Col span={3} order={5} >\n                    Remover\n                </Col>\n            </Row>\n        );\n    };\n\n    SaleItemQuantity = () => {\n        let me=this;\n        //console.log(\"Renderign saleItemQuantities: \",this.state.saleItemQuantities);\n        let saleIQ = this.state.saleItemQuantities;\n        let saleItemQuantities = [];\n        for(let idSaleItem in saleIQ){\n            if(saleIQ.hasOwnProperty(idSaleItem)){\n                saleItemQuantities.push(me.ItemQuantity(saleIQ[idSaleItem],parseInt(idSaleItem)));\n            }\n        }\n        return(\n            <div style={{}}>\n                {saleItemQuantities}\n                <br/>\n                <Row>\n                    <Col span={10} style={{textAlign:\"start\"}}>\n                        <TButton\n                             label={\"Total: \"+this.state.total}\n                             size={\"big\"}\n                        />\n                    </Col>\n                    <Col span={8} offset={6} style={{textAlign:\"end\"}}>\n                        <TButton\n                             type={\"inverse\"}\n                             onClick={this.saveSale}\n                             label={\"GUARDAR\"}\n                             size={\"big\"}\n                        />\n                    </Col>\n                </Row>\n            </div>\n        );\n    };\n\n    ItemQuantity = (itemQuantity,idSaleItem) => {\n        //console.log(\"Rendering itemquanitity for: \",itemQuantity,\" with hashcode \",idSaleItem);\n        return(\n            <Row type=\"flex\" style={this.styleRow} key={idSaleItem}>\n                <Col span={4} order={1} style={this.styleCell}>\n                    <AutoComplete\n                        style={this.styleInputName}\n                        dataSource={this.props.itemQuantityCode[this.props.idWarehouse]}\n                        onSelect={ (value,option) => this.onSelect(value,option,idSaleItem)}\n                        placeholder=\"Codigo...\"\n                        filterOption = {true}\n                        onChange={value => this.handleCodeChange(value,idSaleItem)}\n                        value={itemQuantity[\"hashcode\"]}\n                    />\n                </Col>\n                <Col span={5} order={2} style={this.styleCell}>\n                    <Input style={this.styleInputName} value={itemQuantity[\"name\"]}/>\n                </Col>\n                <Col span={4} order={3} style={this.styleCell}>\n                    <Input style={this.styleInputNumber} value={itemQuantity[\"quantity\"]}\n                           onChange={value =>this.handleQuantityChange(value,idSaleItem)}/>\n                </Col>\n                <Col span={4} order={4} style={this.styleCell}>\n                    <Input style={this.styleInputNumber} value={itemQuantity[\"salePrice\"]}\n                           onChange={value =>this.handleSPChange(value,idSaleItem)}/>\n                </Col>\n                <Col span={4} order={5} style={this.styleCell}>\n                    <Input style={this.styleInputNumber} value={itemQuantity[\"total\"]}/>\n                </Col>\n                <Col span={3} order={5} style={this.styleCell}>\n                    {this.removeItemButton(idSaleItem)}\n                </Col>\n            </Row>\n        );\n    };\n\n\n    render() {\n        return (\n            <div>\n                {this.headers()}\n                {this.SaleItemQuantity()}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = state => {\n    const { appUserReducer, itemQuantityReducer } = state;\n    const { idAppUser,idWarehouse, idShift, idCompany } = appUserReducer;\n    const { itemQuantityCode, itemQuantityHashMap } = itemQuantityReducer;\n    //console.log(\"ItemQuantity in sale form: \",itemQuantityCode);\n    console.log(\"Codes to be displayed for autocomplete: \",itemQuantityCode[idWarehouse]);\n    return {idAppUser, itemQuantityCode, idWarehouse, itemQuantityHashMap, idShift, idCompany};\n};\n\nexport default withRouter(connect(mapStateToProps,{increaseSaleCount,increaseClientSaleCount})(ItemQuantityForm));\n"],"sourceRoot":""}