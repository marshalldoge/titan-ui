{"version":3,"sources":["redux/actionTypes.js","utils.js","redux/reducers/appUserReducer.js","redux/reducers/moduleReducer.js","redux/reducers/shiftReducer.js","redux/reducers/clientReducer.js","redux/reducers/itemQuantityReducer.js","redux/reducers/warehouseReducer.js","redux/reducers/companyReducer.js","redux/reducers/currencyReducer.js","redux/reducers/measureReducer.js","redux/reducers/index.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["SET_ID_APPUSER","SET_APPUSER","SET_ID_SHIFT","SET_ID_WAREHOUSE","SET_MODULE","SET_SHIFT","OPEN_SHIFT","CLOSE_SHIFT","SET_DURATION","INCREASE_SALE_COUNT","SET_NAME_ID_HASHMAP","SET_CLIENT_DATA","SET_BILLNAME_ARRAY","SET_CLIENT_NIT_ARRAY","SET_NIT_CLIENT_HASHMAP","INCRESE_CLIENT_SALE_COUNT","SET_ITEM_QUANTITY","SET_ITEM_QUANTITY_CODE","SET_WAREHOUSE","SET_COMPANY","INCREASE_COMPANY_SALE_COUNT","SET_CURRENCY","SET_MEASURE","setCookie","cname","cvalue","exdays","d","Date","setTime","getTime","expires","toUTCString","document","cookie","getCookie","name","ca","decodeURIComponent","split","i","length","c","charAt","substring","indexOf","deleteCookie","toGMTString","window","getJWtProperty","propertyName","token","base64","replace","JSON","parse","atob","parseJwt","withParams","url","params","k","getUrlParams","key","desiredValue","Params","location","hash","keyUrl","value","parseTime","localDateTime","moment","format","isLetter","str","match","isNumber","getMeasureQuantity","num","parseInt","getMeasureName","initialState","idAppUser","undefined","firstName","username","role","email","cellphone","idShift","idCompany","inShift","idWarehouse","clientCount","saleCount","state","action","type","payload","AppUser","console","log","id","shiftCount","Shift","Object","assign","modules","open","close","cashOpen","cashClose","duration","closed","shift","openCash","nitIdClientHashMap","clientHashMap","clientBillName","nitClientHashMap","clientNit","phoneClientHashMap","phoneArray","hashmap","idClient","itemQuantityHashMap","itemQuantityCode","nameItemHashMap","itemNameArray","warehouseHashMap","nameIdWarehouseHashMap","nameWarehouse","purchaseCount","supplierCount","currencyHashMap","measureHashMap","nameIdMeasureHashMap","nameMeasure","combineReducers","appUserReducer","moduleReducer","shiftReducer","clientReducer","itemQuantityReducer","warehouseReducer","warehouse","hasOwnProperty","push","companyReducer","company","currencyReducer","measureReducer","measure","createStore","rootReducer","AdminLayout","React","lazy","Login","PrivateRoute","Component","component","rest","render","props","to","pathname","from","App","store","Suspense","fallback","exact","path","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.880355e3.chunk.js","sourcesContent":["/*\nexport const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const SET_FILTER = \"SET_FILTER\";\n */\n\nexport const SET_ID_APPUSER = \"SET_ID_APPUSER\";\nexport const SET_APPUSER = \"SET_APPUSER\";\nexport const SET_ID_SHIFT = \"SET_ID_SHIFT\";\nexport const SET_ID_WAREHOUSE = \"SET_ID_WAREHOUSE\";\n\nexport const SET_MODULE = \"SET_MODULE\";\n\nexport const SET_SHIFT = \"SET_SHIFT\";\nexport const OPEN_SHIFT = \"OPEN_SHIFT\";\nexport const CLOSE_SHIFT = \"CLOSE_SHIFT\";\nexport const SET_DURATION = \"SET_DURATION\";\nexport const INCREASE_SALE_COUNT = \"INCREASE_SALE_COUNT\";\n\nexport const SET_NAME_ID_HASHMAP = \"SET_NAME_ID_HASHMAP\";\nexport const SET_CLIENT_DATA = \"SET_CLIENT_DATA\";\nexport const SET_BILLNAME_ARRAY = \"SET_BILLNAME_ARRAY\";\nexport const SET_CLIENT_NIT_ARRAY = \"SET_CLIENT_NIT_ARRAY\";\nexport const SET_NIT_CLIENT_HASHMAP = \"SET_NIT_CLIENT_HASHMAP\";\nexport const INCRESE_CLIENT_SALE_COUNT = \"INCRESE_CLIENT_SALE_COUNT\";\n\nexport const SET_ITEM_QUANTITY = \"SET_ITEM_QUANTITY\";\nexport const SET_ITEM_QUANTITY_CODE = \"SET_ITEM_QUANTITY_CODE\";\nexport const SET_WAREHOUSE = \"SET_WAREHOUSE\";\n\nexport const SET_COMPANY = \"SET_COMPANY\";\nexport const INCREASE_COMPANY_SALE_COUNT = \"INCREASE_COMPANY_SALE_COUNT\";\n\nexport const SET_CURRENCY = \"SET_CURRENCY\";\n\nexport const SET_MEASURE = \"SET_MEASURE\";\n","import moment from \"moment\";\n//--------------------------------COOKIES---------------------------------------\nexport function setCookie(cname, cvalue, exdays) {\n    var d = new Date();\n    //console.log(\"Actual time: \", d.toUTCString());\n    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n    var expires = \"expires=\" + d.toUTCString();\n    //console.log(\"Cookie expires in: \", expires);\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}\n\nexport function parseJwt (token) {\n    var array = token.split('.')[1];\n    var base64 = array.replace('-', '+').replace('_', '/');\n    return JSON.parse(window.atob(base64));\n}\n\nexport function getCookie(cname) {\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i <ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) === ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n            //console.log(\"Cookie Returned: \",sol);\n            return c.substring(name.length, c.length);\n        }\n    }\n    return undefined;\n}\nexport function deleteCookie(cname) {\n    //console.log(\"Cookie a borrar: \",cname);\n    let d = new Date(); //Create an date object\n    d.setTime(d.getTime() - (1000*60*60*24)); //Set the time to the past. 1000 milliseonds = 1 second\n    let expires = \"expires=\" + d.toGMTString(); //Compose the expirartion date\n    //console.log(\"Expires now in: \",expires);\n    window.document.cookie = cname+\"=; \"+expires;//Set the cookie with name and the expiration date\n}\n//--------------------------------END COOKIES---------------------------------------\n\nexport function getJWtProperty(propertyName) {\n    let cookie=getCookie(\"JWT\");\n    let jwt=parseJwt(cookie);\n    let property=jwt[propertyName];\n    return property;\n}\n\n//--------------------------------URL PARAMTETERS------------------------------------------\nexport function withParams(url,params) {\n    url+=\"?\";\n    //console.log(params);\n    let i=0;\n    for (let k in params) {\n       // console.log(k,\"= \",params[k]);\n        if(i>0)url+=\"&\";\n        url+=(k+\"=\"+params[k]);\n        i++;\n    }\n    return url;\n}\nexport function getUrlParams(key) {\n    //console.log(\"my url: \",window.location.hash);\n    const urlParams = window.location.hash.split('?')[1];\n    const Params = urlParams.split('&');\n    let desiredValue;\n    for(let i=0;i<Params.length;i++){\n        const keyUrl = Params[i].split('=')[0];\n        const value = Params[i].split('=')[1];\n        if(keyUrl === key){\n            desiredValue = value;\n        }\n    }\n    return desiredValue;\n}\n//--------------------------------END URL PARAMETERS---------------------------------------\n//--------------------------------PATH------------------------------------------\nexport function changePath(newView){\n    //this.setState({activeSubmenu:newActiveSubmenu});\n    console.log(\"GOING TO SUBMENU; \",newView.replace( /\\s/g, ''));\n    this.props.history.push(newView.replace( /\\s/g, '') );\n};\n//--------------------------------END PATH---------------------------------------\n//--------------------------------TIME PARSER-------------------------------------------\nexport function parseTime(localDateTime) {\n    let timestamp = moment(localDateTime);\n    return timestamp.format(\"DD/MM/YY HH:mm\");\n}\n//--------------------------------END TIME PARSER---------------------------------------\n//--------------------------------STRING-------------------------------------------\nexport function isLetter(str) {\n    return str.length === 1 && str.match(/[a-z]/i);\n}\nexport function isNumber(str) {\n\treturn str.length === 1 && str.match(/[0-9]/i);\n}\nexport function getMeasureQuantity(str) {\n\tlet num = \"\";\n\tfor(let i = 0; i < str.length; i++) {\n\t\tif(isLetter(str[i])){\n\t\t\tbreak;\n\t\t}\n\t\tnum+=str[i];\n\t}\n\treturn parseInt(num);\n}\nexport function getMeasureName(str) {\n\tfor(let i = 0; i < str.length; i++) {\n\t\tif(isLetter(str[i])){\n\t\t\treturn str.substring(i);\n\t\t}\n\t}\n\treturn \"\";\n}\n//--------------------------------END STRING---------------------------------------\n","import {SET_ID_APPUSER, SET_APPUSER, SET_ID_SHIFT, SET_ID_WAREHOUSE, CLOSE_SHIFT} from \"../actionTypes\";\n\nconst initialState = {\n    idAppUser:undefined,\n    firstName:undefined,\n    username:undefined,\n    role:undefined,\n    email:undefined,\n    cellphone: undefined,\n    idShift:undefined,\n    idCompany:undefined,\n    inShift:false,\n    idWarehouse:1,\n    clientCount:0,\n    saleCount:null\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_ID_APPUSER: {\n            //console.log(\"The content to be updated: \",action);\n            const { idAppUser} = action.payload;\n            //console.log(\"Current appUser \",idAppUser);\n            return {\n                ...state,\n                idAppUser: idAppUser\n            };\n        }\n        case SET_APPUSER:{\n            //console.log(\"SET_APPUSER: The content to be updated: \",action);\n            const {AppUser} = action.payload;\n            console.log(\"Current appUser \",AppUser);\n            return {\n                ...state,\n                idAppUser: AppUser.id,\n                firstName:AppUser.firstName,\n                username:AppUser.username,\n                role:AppUser.role,\n                email:AppUser.email,\n                cellphone: AppUser.cellphone,\n                idShift:AppUser.idShift,\n                idCompany:AppUser.idCompany,\n                inShift:AppUser.inShift,\n                shiftCount:AppUser.shiftCount,\n                saleCount:AppUser.saleCount\n            };\n        }\n        case SET_ID_SHIFT:{\n            console.log(\"SET_ID_SHIFT: action.payload: \",action.payload);\n            const { id } = action.payload.Shift;\n            console.log(\"SET_ID_SHIFT: Placing Id of shift: \",id);\n            return Object.assign({}, state, {\n                idShift: id,\n                inShift:true\n            });\n        }\n        case SET_ID_WAREHOUSE:{\n            console.log(\"SET_ID_WAREHOUSE: action.payload: \",action.payload);\n            const { idWarehouse } = action.payload;\n            console.log(\"SET_ID_WAREHOUSE: Placing Id of Warehouse: \",idWarehouse);\n            return {\n                ...state,\n                idWarehouse: idWarehouse\n            }\n        }\n        case CLOSE_SHIFT:{\n            console.log(\"AppUserReducer: Updating inShift to \",false);\n            return Object.assign({}, state, {\n                inShift: false\n            });\n        }\n        default:\n            return state;\n    }\n}\n","import { SET_ID_APPUSER, SET_MODULE } from \"../actionTypes\";\n\nconst initialState = {\n    modules:{}\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_ID_APPUSER: {\n            //console.log(\"The content to be updated: \",action);\n            const { idAppUser} = action.payload;\n            //console.log(\"Current appUser \",idAppUser);\n            return {\n                ...state,\n                idAppUser: idAppUser\n            };\n        }\n        case SET_MODULE:{\n            //console.log(\"SET_MODULE: The content to be updated: \",action);\n            const modules = action.payload;\n            //console.log(\"Current MODULE \",modules);\n            return {\n                ...state,\n                modules : modules\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import { SET_SHIFT, OPEN_SHIFT, SET_DURATION, INCREASE_SALE_COUNT } from \"../actionTypes\";\n\nconst initialState = {\n    open:null,\n    close:null,\n    cashOpen:0,\n    cashClose:0,\n    duration:0,\n    closed:false,\n    saleCount:0\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_SHIFT:{\n            //console.log(\"SET_MODULE: The content to be updated: \",action);\n            const shift = action.payload;\n            console.log(\"Setting shift for shiftReducer: \",shift);\n            console.log(\"Setting open for shiftReducer: \",shift.open);\n            return Object.assign({}, state, {\n                open: shift.open,\n                openCash: shift.cashOpen,\n                cashClose: shift.cashClose,\n                close: shift.close,\n                saleCount: shift.saleCount\n            });\n        }\n        case OPEN_SHIFT:{\n            console.log(\"OPEN_SHIFT: The content to be updated: \",action);\n            const {open,cashOpen} = action.payload;\n            console.log(\"shift reducer: open:\",open,\" and opencash: \",cashOpen);\n            return {\n                ...state,\n                open : open,\n                cashOpen : cashOpen\n            };\n        }\n        case SET_DURATION:{\n            //console.log(\"SET_MODULE: The content to be updated: \",action);\n            const { duration } = action.payload;\n            //console.log(\"Current MODULE \",modules);\n            return {\n                ...state,\n                duration : duration\n            };\n        }\n        case INCREASE_SALE_COUNT:{\n            return Object.assign({}, state, {\n                saleCount:state.saleCount+1\n            });\n        }\n        default:\n            return state;\n    }\n}","import { SET_NAME_ID_HASHMAP, SET_CLIENT_DATA,SET_BILLNAME_ARRAY, SET_CLIENT_NIT_ARRAY, SET_NIT_CLIENT_HASHMAP,\n    INCRESE_CLIENT_SALE_COUNT\n} from \"../actionTypes\";\n\nconst initialState = {\n    nitIdClientHashMap:{},\n    clientHashMap:{},\n    clientBillName:[],\n    nitClientHashMap:{},\n    clientNit:[],\n\tphoneClientHashMap: {},\n\tphoneArray: []\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_NAME_ID_HASHMAP:{\n            //console.log(\"SET_MODULE: The content to be updated: \",action);\n            const hashmap = action.payload;\n            //console.log(\"Current MODULE \",modules);\n            return {\n                ...state,\n                nitIdClientHashMap:hashmap\n            };\n        }\n        case SET_CLIENT_DATA:{\n            //console.log(\"SET_MODULE: The content to be updated: \",action);\n            const clientHashMap = action.payload;\n            //console.log(\"Current MODULE \",modules);\n\t        console.log('Client hashmap: ',clientHashMap);\n            return {\n                ...state,\n                clientHashMap:clientHashMap\n            };\n        }\n        case SET_BILLNAME_ARRAY:{\n            //console.log(\"SET_MODULE: The content to be updated: \",action);\n            const clientBillName = action.payload;\n            //console.log(\"Current MODULE \",modules);\n            return {\n                ...state,\n                clientBillName:clientBillName\n            };\n        }\n        case SET_CLIENT_NIT_ARRAY: {\n            //console.log(\"SET_MODULE: The content to be updated: \",action);\n            const {clientNit, phoneArray, phoneClientHashMap} = action.payload;\n            //console.log(\"clientNit to save in reducer: \",clientNit);\n            return {\n                ...state,\n                clientNit: clientNit,\n\t            phoneArray: phoneArray,\n\t            phoneClientHashMap: phoneClientHashMap\n            };\n        }\n        case SET_NIT_CLIENT_HASHMAP: {\n            //console.log(\"SET_MODULE: The content to be updated: \",action);\n            const nitClientHashMap = action.payload;\n            //console.log(\"clientNit to save in reducer: \",nitClientHashMap);\n            return {\n                ...state,\n                nitClientHashMap: nitClientHashMap\n            };\n        }\n        case INCRESE_CLIENT_SALE_COUNT: {\n            const idClient = action.payload;\n            console.log(\"idClient to update saleCount: \",idClient);\n            return Object.assign({}, state, {\n                clientHashMap:{\n                    ...state.clientHashMap,\n                    [idClient]:{\n                        ...state.clientHashMap[idClient],\n                        saleCount:state.clientHashMap[idClient].saleCount+1\n                    }\n                }\n            });\n        }\n        default:\n            return state;\n    }\n}\n","import {SET_ITEM_QUANTITY, SET_ITEM_QUANTITY_CODE } from \"../actionTypes\";\n\nconst initialState = {\n    itemQuantityHashMap: {},\n    itemQuantityCode: {},\n\tnameItemHashMap: {},\n\titemNameArray: []\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_ITEM_QUANTITY: {\n            //console.log(\"The content to be updated: \",action);\n            const itemQuantityHashMap = action.payload;\n            //console.log(\"Current appUser \",idAppUser);\n            return {\n                ...state,\n                itemQuantityHashMap: itemQuantityHashMap\n            };\n        }\n        case SET_ITEM_QUANTITY_CODE:{\n            //console.log(\"The content to be updated: \",action);\n\t        //console.log('payload: ',action.payload);\n            const {itemQuantityCode, nameItemHashMap, itemNameArray} = action.payload;\n            //console.log(\"Current appUser \",idAppUser);\n            return {\n                ...state,\n                itemQuantityCode: itemQuantityCode,\n\t            nameItemHashMap: nameItemHashMap,\n\t            itemNameArray: itemNameArray\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import { SET_WAREHOUSE } from \"../actionTypes\";\n\nconst initialState = {\n    warehouseHashMap:{},\n    nameIdWarehouseHashMap:{},\n    nameWarehouse:[]\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_WAREHOUSE:{\n            //console.log(\"SET_MODULE: The content to be updated: \",action);\n            const warehouseHashMap = action.payload;\n            let nameWarehouse = [];\n            let nameIdWarehouseHashMap = {};\n            for(let warehouse in warehouseHashMap){\n                if(warehouseHashMap.hasOwnProperty(warehouse)) {\n                    nameWarehouse.push(warehouseHashMap[warehouse][\"name\"]);\n                    nameIdWarehouseHashMap[warehouseHashMap[warehouse][\"name\"]]=warehouse;\n                }\n            }\n            console.log(\"Current nameIdWarehouseHashMap \",nameIdWarehouseHashMap);\n            return {\n                ...state,\n                warehouseHashMap : warehouseHashMap,\n                nameWarehouse : nameWarehouse,\n                nameIdWarehouseHashMap : nameIdWarehouseHashMap\n            };\n        }\n        default:\n            return state;\n    }\n}","import {INCREASE_COMPANY_SALE_COUNT, SET_COMPANY} from \"../actionTypes\";\n\nconst initialState = {\n    idCompany:null,\n    clientCount:null,\n    saleCount: null,\n    purchaseCount: null,\n    supplierCount: null\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_COMPANY:{\n            //console.log(\"SET_MODULE: The content to be updated: \",action);\n            const company = action.payload;\n            //console.log(\"Current MODULE \",modules);\n            console.log(\"Receiving company in reducer: \",company);\n            return {\n                ...state,\n                idCompany:company.id,\n                clientCount:company.clientCount,\n                saleCount:company.saleCount,\n                purchaseCount:company.purchaseCount,\n                supplierCount:company.supplierCount\n            };\n        }\n        case INCREASE_COMPANY_SALE_COUNT:{\n            return Object.assign({}, state, {\n                saleCount:state.saleCount+1\n            });\n        }\n        default:\n            return state;\n    }\n}\n","import {SET_CURRENCY} from \"../actionTypes\";\n\nconst initialState = {\n\tcurrencyHashMap: {}\n};\n\nexport default function(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase SET_CURRENCY:{\n\t\t\t//console.log(\"SET_MODULE: The content to be updated: \",action);\n\t\t\t//console.log(\"Current MODULE \",modules);\n\t\t\tconsole.log(\"CURRENCY REDUCER hashmap: \",action.payload);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrencyHashMap: action.payload\n\t\t\t};\n\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { SET_MEASURE } from \"../actionTypes\";\n\nconst initialState = {\n\tmeasureHashMap:{},\n\tnameIdMeasureHashMap:{},\n\tnameMeasure:[]\n};\n\nexport default function(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase SET_MEASURE:{\n\t\t\t//console.log(\"SET_MODULE: The content to be updated: \",action);\n\t\t\tconst measureHashMap = action.payload;\n\t\t\tlet nameMeasure = [];\n\t\t\tlet nameIdMeasureHashMap = {};\n\t\t\tfor(let measure in measureHashMap){\n\t\t\t\tif(measureHashMap.hasOwnProperty(measure)) {\n\t\t\t\t\tnameMeasure.push(measureHashMap[measure][\"name\"]);\n\t\t\t\t\tnameIdMeasureHashMap[measureHashMap[measure][\"name\"]]=parseInt(measure);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(\"Current nameIdMeasureHashMap \",nameIdMeasureHashMap);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmeasureHashMap : measureHashMap,\n\t\t\t\tnameMeasure : nameMeasure,\n\t\t\t\tnameIdMeasureHashMap : nameIdMeasureHashMap\n\t\t\t};\n\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { combineReducers } from \"redux\";\nimport appUserReducer from \"./appUserReducer\";\nimport moduleReducer from \"./moduleReducer\";\nimport shiftReducer from \"./shiftReducer\";\nimport clientReducer from \"./clientReducer\";\nimport itemQuantityReducer from \"./itemQuantityReducer\";\nimport warehouseReducer from \"./warehouseReducer\";\nimport companyReducer from \"./companyReducer\";\nimport currencyReducer from \"./currencyReducer\";\nimport measureReducer from \"./measureReducer\";\n\nexport default combineReducers({ appUserReducer, moduleReducer, shiftReducer,\n    clientReducer, itemQuantityReducer, warehouseReducer, companyReducer, currencyReducer, measureReducer});\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);\n","import React from 'react';\nimport {\n  HashRouter,\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom';\nimport {getCookie } from \"./utils\";\nimport './App.scss';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nconst AdminLayout = React.lazy(() => import('./pages/AdminLayout/AdminLayout'));\nconst Login = React.lazy(() => import('./pages/Login/Login'));\n\nconst loading = () => <div>Loading...</div>;\nconst Authenticate= ()=>{\n  console.log(\"Authenticando...\");\n  if(getCookie(\"JWT\") !== undefined){\n    console.log(\"Usuario authenticado :)\");\n    return true;\n  }else{\n    console.log(\"Usuario no autenticado :$\");\n    return false;\n  }\n}\nconst PrivateRoute = ({component: Component, ...rest}) => (\n     <Route {...rest} render={(props) => (\n          Authenticate()\n               ? <Component {...props} />\n               : <Redirect to={{\n                 pathname: '/login',\n                 state: {from: props.location}\n               }}/>\n     )}/>\n)\n\nfunction App() {\n  return (\n       <div>\n         <Provider store = {store}>\n           <HashRouter>\n             <React.Suspense fallback={loading()}>\n               <Switch>\n                 <Route exact path='/Login' component={Login} render={props => <Login {...props}/>}></Route>\n                 <PrivateRoute exact path='/Dashboard' component={AdminLayout} ></PrivateRoute>\n                 <PrivateRoute path='/' component={AdminLayout}></PrivateRoute>\n               </Switch>\n             </React.Suspense>\n           </HashRouter>\n         </Provider>\n       </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}