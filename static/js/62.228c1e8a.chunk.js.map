{"version":3,"sources":["components/PaginatedLazyTable/PaginatedLazyTable.js"],"names":["PaginatedLazyTable","props","state","fields","currentPage","pageRange","first","last","pageData","0","1","rowHeight","headerHeight","thStyle","width","height","toString","th","field","index","key","className","style","headerName","thead","headers","columnDefs","map","trStyle","cursor","trStyleEmpty","tr","row","tds","e","render","i","length","push","tdRender","td","onClick","onRowClick","trEmpty","tdStyle","background","value","tableStyle","display","borderBottomColor","borderBottomWidth","borderBottomStyle","titleStyles","fontWeight","fontSize","title","titleText","table","tbody","rowData","emptyObject","pageSize","pagination","current","onChange","total","page","loadTablePage","setState","console","log","tableContainerStyle","Math","max","textAlign","bind","this","Component","withRouter"],"mappings":"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","file":"static/js/62.228c1e8a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { Pagination } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"../../redux/reducers/appUserReducer\";\nimport \"./_PaginatedLazyTable.scss\";\n\n\nclass PaginatedLazyTable extends Component {\n\n    //TODO add onHover effect to each row of table\n    //TODO show an error message when the service fails\n    constructor(props) {\n        super(props);\n        this.loadTablePage = this.props.loadTablePage.bind(this);\n    };\n\n    state = {\n        fields: [],\n        currentPage: 0,\n        pageRange: {\n            first: 0,\n            last: 1\n        },\n        pageData:{\n            0:[],\n            1:[]\n        },\n        rowHeight: 35,\n        headerHeight: 54\n    };\n\n    componentDidMount() {\n        for(let page=0;page<2;page++) {\n            this.loadTablePage(page);\n        }\n    }\n\n    thStyle = width => {\n        return {\n            width: width,\n            height: this.state.headerHeight.toString()+\"px\"\n        };\n    };\n\n    th = (field,index) => {\n        return (\n             <th key={index} className={\"th\"} style={this.thStyle(field.width)}>{field.headerName}</th>\n        );\n    };\n\n    thead = () => {\n        let headers = this.props.columnDefs.map((field,index) => {\n            return this.th(field, index)\n        });\n        return (\n             <thead className={\"thead\"}>\n                 <tr>\n                     {headers}\n                 </tr>\n             </thead>\n        );\n    };\n\n    trStyle = {\n        cursor:\"pointer\",\n        height:this.state.rowHeight.toString()+\"px\"\n    };\n\n    trStyleEmpty = {\n        height:this.state.rowHeight.toString()+\"px\"\n    };\n\n    tr = (row,index) => {\n        let tds = [];\n\t    let fields = this.props.columnDefs.map(e => {\n\t\t    if(e.render) return e.render;\n\n\t\t    return e.field;\n\t    });\n\t    //console.log(\"tr fields: \",fields);\n\t    //console.log(\"row: \",row);\n\t    for(let i=0;i<fields.length;i++){\n\t\t    if(typeof fields[i] === 'function') {\n\t\t\t    tds.push(this.tdRender(fields[i], row, i, index%2===0? \"white\": \"#ECEDF0\"));\n\t\t    } else {\n\t\t\t    tds.push(this.td(row[fields[i]], i,index%2===0? \"white\": \"#ECEDF0\"));\n\t\t    }\n\t    }\n        return(\n             <tr className={\"tr\"} style = {this.trStyle} key={index} onClick={() => this.props.onRowClick(row)}>\n                 {tds}\n             </tr>\n        );\n    };\n\n    trEmpty = (row,index) => {\n        let tds = [];\n        let fields = this.props.columnDefs.map(e => e.field);\n        //console.log(\"tr fields: \",fields);\n        //console.log(\"row: \",row);\n        for(let i=0;i<fields.length;i++){\n            tds.push(this.td(row[fields[i]],i,index%2===0?\"white\":\"#ECEDF0\"));\n        }\n        return(\n             <tr style={this.trStyleEmpty} key={index}>\n                 {tds}\n             </tr>\n        );\n    };\n\n    tdStyle = background => {\n        return {\n            height: \"30px\",\n            background:background\n        };\n    };\n\n    td = (value,index,background) => {\n        return(\n             <td key={index} className={\"td\"} style={this.tdStyle(background)}>{value}</td>\n        );\n    };\n\n\ttdRender = (render, row, index, background) => {\n\t\treturn(\n\t\t\t <td key={index} className={\"td\"} style={this.tdStyle(background)}>{render(row)}</td>\n\t\t);\n\t};\n\n    tableStyle = {\n        background:\"white\",\n        display:\"inline-table\",\n        width: \"100%\",\n        borderBottomColor: \"#ECEDF0\",\n        borderBottomWidth: \"1px\",\n        borderBottomStyle: \"solid\"\n    };\n\n    titleStyles = {\n        fontWeight: '500',\n        fontSize: '25px'\n    };\n\n    title = () => {\n        let titleText = this.props.title;\n        if(titleText){\n            return (\n                 <h1 className={\"title\"}>{titleText}</h1>\n            );\n        }else{\n            return null;\n        }\n    };\n\n    table = () =>{\n        return (\n             <table style={this.tableStyle}>\n                 {this.thead()}\n                 {this.tbody()}\n             </table>\n        );\n    };\n\n    tbody = () => {\n        let rowData = this.state.pageData[this.state.currentPage].map((row,index) => this.tr(row,index));\n\n        //This is to print white and gray empty lines\n        let emptyObject = {};\n        for(let i = 0; i < this.props.columnDefs.length; i++) {\n            emptyObject[this.props.columnDefs[i]['field']] = '';\n        }\n        for(let i = rowData.length;i < this.props.pageSize; i++) {\n            rowData.push(this.trEmpty(emptyObject,i));\n        }\n\n        return(\n             <tbody>\n             {rowData}\n             </tbody>\n        );\n    };\n\n    pagination = () => {\n        return(\n             <Pagination\n                  current={this.state.currentPage+1}\n                  onChange={this.onChange}\n                  total={this.props.length}\n                  pageSize={this.props.pageSize?this.props.pageSize:10}\n             />\n        );\n    };\n\n    onChange = page => {\n        //console.log(\"OnChange: State data: \",page);\n        if(page>this.state.currentPage){\n            //console.log(\"loading next page:\");\n            this.loadTablePage(this.state.pageRange.last+1);\n            this.setState(state => {\n                let pageRange = state.pageRange;\n                pageRange.last=pageRange.last+1;\n                return {\n                    pageRange:pageRange\n                }\n            });\n        }else{\n            //Not erasing data, so this is not necesary yet.\n            //this.props.loadSaleTablePage(this.state.pageRange.first-1);\n        }\n        console.log(\"Showing page: \",page-1);\n        this.setState({\n            currentPage: page-1,\n        });\n    };\n\n    tableContainerStyle = {\n        height: Math.max(((this.props.pageSize*this.state.rowHeight)+this.state.headerHeight),190).toString()+\"px\",\n        background:\"white\",\n        textAlign:\"center\"\n    };\n\n    render() {\n        return (\n             <div>\n                 {this.title()}\n                 <div style={this.tableContainerStyle}>\n                     {this.table()}\n                 </div>\n                 <br/>\n                 <br/>\n                 {this.pagination()}\n             </div>\n        );\n    };\n}\n\nexport default withRouter(PaginatedLazyTable);\n"],"sourceRoot":""}